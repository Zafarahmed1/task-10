from typing import List, Optional

class Audio:
    def __init__(self, name: str, url: str, rating: float = 0.0):
        self.name = name
        self.url = url
        self.rating = rating

    def set_rating(self, rating: float):
        self.rating = rating

class User:
    def __init__(self, name: str):
        self.name = name
        self.playlists = []

    def add_playlist(self, playlist: 'Playlist'):
        self.playlists.append(playlist)

    def rate_audio(self, audio: Audio, rating: float):
        audio.set_rating(rating)

class Playlist:
    def __init__(self, name: str):
        self.name = name
        self.audios = []
        self.user_ratings = []

    def add_audio(self, audio: Audio):
        self.audios.append(audio)

    def calculate_average_rating(self) -> Optional[float]:
        if not self.user_ratings:
            return None
        return sum(self.user_ratings) / len(self.user_ratings)

    def add_user_rating(self, rating: float):
        self.user_ratings.append(rating)

class MusicPlayer:
    def __init__(self):
        self.audios = []
        self.playlists = []
        self.users = []

    def create_audio(self, name: str, url: str):
        audio = Audio(name, url)
        self.audios.append(audio)
        return audio

    def create_playlist(self, name: str):
        playlist = Playlist(name)
        self.playlists.append(playlist)
        return playlist

    def add_audio_to_playlist(self, playlist: Playlist, audio: Audio):
        playlist.add_audio(audio)

    def search_audio_by_name(self, name: str) -> List[Audio]:
        return [audio for audio in self.audios if audio.name == name]

    def search_playlist_by_name(self, name: str) -> List[Playlist]:
        return [playlist for playlist in self.playlists if playlist.name == name]

    def add_user(self, name: str):
        user = User(name)
        self.users.append(user)
        return user

    def rate_audio(self, user: User, audio: Audio, rating: float):
        audio.set_rating(rating)
        user.rate_audio(audio, rating)

    def calculate_average_playlist_rating(self, playlist: Playlist) -> Optional[float]:
        return playlist.calculate_average_rating()